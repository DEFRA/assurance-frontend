{% extends 'layouts/page.njk' %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "status-tag.njk" import renderStatusTag %}

{% block content %}
  {{ appHeading({
    text: "Projects"
  }) }}

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <form method="GET" action="/" class="govuk-!-margin-bottom-6">
        <div class="govuk-grid-row">
          <div class="govuk-grid-column-two-thirds">
            <div class="govuk-form-group">
              <label class="govuk-label govuk-label--s" for="search">
                Search projects
              </label>
              <div id="search-container" class="govuk-!-margin-bottom-0"></div>
            </div>
          </div>
          <div class="govuk-grid-column-one-third">
            <div class="govuk-form-group" style="margin-top: 30px;">
              {{ govukButton({
                text: "Search"
              }) }}
              
              {% if searchTerm %}
                <a href="/" class="govuk-link govuk-!-margin-left-3">Clear search</a>
              {% endif %}
            </div>
          </div>
        </div>
      </form>

      {% if isAdmin %}
        <p class="govuk-body govuk-!-margin-bottom-6">
          <a href="/projects/add" class="govuk-link">Add new project</a>
        </p>
      {% endif %}

      {% if projects and projects.length > 0 %}
        {% set tableRows = [] %}
        {% for project in projects %}
          {% set row = [
            {
              html: "<a href='/projects/" + project.id + "' class='govuk-link'>" + project.name + "</a>"
            },
            {
              html: renderStatusTag(project.status)
            }
          ] %}
          {% set tableRows = (tableRows.push(row), tableRows) %}
        {% endfor %}

        {{ govukTable({
          caption: "List of projects and their current status",
          captionClasses: "govuk-visually-hidden",
          head: [
            {
              text: "Project name"
            },
            {
              text: "RAG status"
            }
          ],
          rows: tableRows
        }) }}
      {% else %}
        <p class="govuk-body">No projects found.</p>
      {% endif %}
    </div>
  </div>
{% endblock %}

{% block pageStyles %}
<style>
  /* Add GDS Transport font for autocomplete */
  @font-face {
    font-family: "GDS Transport";
    src: url("/fonts/light-94a07e06a1-v2.woff2") format("woff2");
    font-weight: normal;
    font-style: normal;
    font-display: fallback;
  }
  
  @font-face {
    font-family: "GDS Transport";
    src: url("/fonts/bold-b542beb274-v2.woff2") format("woff2");
    font-weight: bold;
    font-style: normal;
    font-display: fallback;
  }
  
  /* Override autocomplete with GDS styling - using more specific selectors */
  .govuk-template .autocomplete__wrapper * {
    font-family: "GDS Transport", arial, sans-serif !important;
  }
  
  .govuk-template .autocomplete__wrapper {
    font-family: "GDS Transport", arial, sans-serif !important;
  }
  
  .govuk-template .autocomplete__input {
    font-family: "GDS Transport", arial, sans-serif !important;
    font-size: 19px !important;
    line-height: 1.25 !important;
    padding: 5px !important;
    height: 40px !important;
    border: 2px solid #0b0c0c !important;
  }
  
  /* Target the menu and options specifically */
  .govuk-template .autocomplete__menu {
    font-family: "GDS Transport", arial, sans-serif !important;
    background-color: #fff !important;
    border: 2px solid #0b0c0c !important;
    border-top: 0 !important;
    width: 100% !important;
    max-height: 342px !important;
    margin: 0 !important;
    padding: 0 !important;
  }
  
  /* Target all options in the dropdown */
  .govuk-template .autocomplete__menu .autocomplete__option {
    font-family: "GDS Transport", arial, sans-serif !important;
    font-size: 16px !important;
    line-height: 1.5 !important;
    padding: 8px !important;
    border-bottom: 1px solid #b1b4b6 !important;
    color: #0b0c0c !important;
    background-color: #fff !important;
  }
  
  /* Target odd options specifically */
  .govuk-template .autocomplete__menu .autocomplete__option--odd {
    background-color: #f3f2f1 !important;
  }
  
  /* Override hover and focus states */
  .govuk-template .autocomplete__menu .autocomplete__option:hover,
  .govuk-template .autocomplete__menu .autocomplete__option--focused {
    background-color: #1d70b8 !important;
    border-color: #1d70b8 !important;
    color: white !important;
    outline: none !important;
  }
  
  /* Selected option */
  .govuk-template .autocomplete__menu .autocomplete__option--selected {
    background-color: #1d70b8 !important;
    color: white !important;
  }
  
  /* Override media query styles */
  @media (min-width: 641px) {
    .govuk-template .autocomplete__hint,
    .govuk-template .autocomplete__input,
    .govuk-template .autocomplete__option {
      font-family: "GDS Transport", arial, sans-serif !important;
      font-size: 19px !important;
      line-height: 1.31579 !important;
    }
  }
</style>
{% endblock %}

{% block pageScripts %}
<script>
  (function() {
    // Store event handlers in variables for cleanup
    let formSubmitHandler = null;
    let domContentLoadedHandler = null;

    // Initialize autocomplete and form handling
    domContentLoadedHandler = function() {
      // Create a source array with project names and IDs for easy lookup
      const projects = {{ projects | dump | safe }};
      const projectsById = {};
      const projectsByName = {};
      
      // Create lookup maps for faster access
      projects.forEach(project => {
        projectsById[project.id] = project;
        projectsByName[project.name] = project;
      });
      
      // Create a list of project names for the autocomplete
      const projectNames = projects.map(project => project.name);
      
      // Initialize the GOV.UK accessible autocomplete
      accessibleAutocomplete({
        element: document.querySelector('#search-container'),
        id: 'search',
        name: 'search',
        defaultValue: '{{ searchTerm }}',
        source: projectNames,
        placeholder: 'Start typing to search',
        autoselect: false,
        confirmOnBlur: false,
        showNoOptionsFound: true,
        minLength: 2,
        displayMenu: 'overlay',
        onConfirm: function(selectedProjectName) {
          if (selectedProjectName) {
            // Only navigate directly if the name exactly matches a project
            const project = projectsByName[selectedProjectName];
            if (project && project.id && selectedProjectName === project.name) {
              window.location.href = `/projects/${project.id}`;
            } else {
              // Otherwise submit the form to perform a search
              form.submit();
            }
          }
        },
        tNoResults: function() { 
          return 'No projects found';
        },
        tStatusQueryTooShort: function(minQueryLength) {
          return `Type in ${minQueryLength} or more characters for results`;
        }
      });
      
      // Handle form submission
      const form = document.querySelector('form');
      const autocompleteInput = document.querySelector('.autocomplete__input');
      
      // Add keydown event listener for enter key
      if (autocompleteInput) {
        autocompleteInput.addEventListener('keydown', function(event) {
          if (event.key === 'Enter') {
            event.preventDefault();
            form.submit();
          }
        });
      }
      
      formSubmitHandler = function(event) {
        // Get the visible input from the autocomplete
        const autocompleteInput = document.querySelector('.autocomplete__input');
        
        // Get the hidden input created by the autocomplete component
        const hiddenInput = form.querySelector('input[name="search"]');
        
        if (autocompleteInput && hiddenInput) {
          // Ensure the hidden input has the value from the visible input
          hiddenInput.value = autocompleteInput.value;
        }
        
        // Always allow form submission
        return true;
      };
      
      form.addEventListener('submit', formSubmitHandler);
      
      // Inject GDS Transport font styling directly after component initialization
      // This ensures our styles will be applied last and override the component's default styles
      setTimeout(function() {
        const styleEl = document.createElement('style');
        styleEl.textContent = `
          /* Force GDS Transport font on all autocomplete elements */
          .autocomplete__wrapper * {
            font-family: "GDS Transport", arial, sans-serif !important;
          }
          
          .autocomplete__input {
            font-family: "GDS Transport", arial, sans-serif !important;
            font-size: 19px !important;
            line-height: 1.25 !important;
            padding: 5px !important;
            height: 40px !important;
            border: 2px solid #0b0c0c !important;
          }
          
          .autocomplete__menu {
            font-family: "GDS Transport", arial, sans-serif !important;
            background-color: #fff !important;
            border: 2px solid #0b0c0c !important;
            border-top: 0 !important;
            width: 100% !important;
            max-height: 342px !important;
            margin: 0 !important;
            padding: 0 !important;
          }
          
          .autocomplete__menu .autocomplete__option {
            font-family: "GDS Transport", arial, sans-serif !important;
            font-size: 16px !important;
            line-height: 1.5 !important;
            padding: 8px !important;
            border-bottom: 1px solid #b1b4b6 !important;
            color: #0b0c0c !important;
            background-color: #fff !important;
          }
          
          .autocomplete__menu .autocomplete__option--odd {
            background-color: #f3f2f1 !important;
          }
          
          .autocomplete__menu .autocomplete__option:hover,
          .autocomplete__menu .autocomplete__option--focused {
            background-color: #1d70b8 !important;
            border-color: #1d70b8 !important;
            color: white !important;
            outline: none !important;
          }
          
          .autocomplete__menu .autocomplete__option--selected {
            background-color: #1d70b8 !important;
            color: white !important;
          }
          
          /* Override media query styles */
          @media (min-width: 641px) {
            .autocomplete__hint,
            .autocomplete__input,
            .autocomplete__option {
              font-family: "GDS Transport", arial, sans-serif !important;
              font-size: 19px !important;
              line-height: 1.31579 !important;
            }
          }
        `;
        document.head.appendChild(styleEl);
      }, 100); // Small delay to ensure autocomplete is fully initialized
    };

    // Add the DOMContentLoaded listener
    document.addEventListener('DOMContentLoaded', domContentLoadedHandler);

    // Cleanup function to remove event listeners
    function cleanup() {
      const form = document.querySelector('form');
      if (form && formSubmitHandler) {
        form.removeEventListener('submit', formSubmitHandler);
      }
      if (domContentLoadedHandler) {
        document.removeEventListener('DOMContentLoaded', domContentLoadedHandler);
      }
    }

    // Clean up event listeners when the page is unloaded
    window.addEventListener('unload', cleanup);
  })();
</script>
{% endblock %}