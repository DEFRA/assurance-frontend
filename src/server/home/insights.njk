{% extends 'layouts/page.njk' %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "status-tag.njk" import renderStatusTag %}

{% block content %}
  {{ appHeading({
    text: heading
  }) }}

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <form method="GET" action="/insights" class="govuk-!-margin-bottom-6">
        <div class="govuk-grid-row">
          <div class="govuk-grid-column-two-thirds">
            <div class="govuk-form-group">
              <label class="govuk-label govuk-label--s" for="search">
                Search projects
              </label>
              <div id="search-container" class="govuk-!-margin-bottom-0"></div>
            </div>
          </div>
          <div class="govuk-grid-column-one-third">
            <div class="govuk-form-group govuk-!-margin-top-6">
              {{ govukButton({
                text: "Search",
                type: "submit"
              }) }}
              
              {% if searchTerm %}
                <a href="/insights" class="govuk-link govuk-!-margin-left-3">Clear search</a>
              {% endif %}
            </div>
          </div>
        </div>
      </form>

      {% if searchTerm %}
        <h2 class="govuk-heading-m">Search results for: "{{ searchTerm }}"</h2>
        {% if projects.length == 0 %}
          <p class="govuk-body">No projects found matching your search.</p>
          <p class="govuk-body"><a href="/insights" class="govuk-link">View all projects</a></p>
        {% endif %}
      {% endif %}

      {% if projects.length > 0 %}
        <!-- Project Status Summary Card -->
        <div class="govuk-!-margin-bottom-6">
          <h2 class="govuk-heading-m">Project status overview</h2>
          <div class="govuk-grid-row">
            <div class="govuk-grid-column-one-half">
              <div class="govuk-summary-card">
                <div class="govuk-summary-card__title-wrapper">
                  <h3 class="govuk-summary-card__title">Manual RAG status counts</h3>
                </div>
                <div class="govuk-summary-card__content">
                  {{ govukSummaryList({
                    rows: [
                      {
                        key: { html: renderStatusTag("RED") },
                        value: { text: statusCounts.RED }
                      } if statusCounts.RED > 0,
                      {
                        key: { html: renderStatusTag("AMBER_RED") },
                        value: { text: statusCounts.AMBER_RED }
                      } if statusCounts.AMBER_RED > 0,
                      {
                        key: { html: renderStatusTag("AMBER") },
                        value: { text: statusCounts.AMBER }
                      } if statusCounts.AMBER > 0,
                      {
                        key: { html: renderStatusTag("GREEN_AMBER") },
                        value: { text: statusCounts.GREEN_AMBER }
                      } if statusCounts.GREEN_AMBER > 0,
                      {
                        key: { html: renderStatusTag("GREEN") },
                        value: { text: statusCounts.GREEN }
                      } if statusCounts.GREEN > 0,
                      {
                        key: { html: renderStatusTag("TBC") },
                        value: { text: statusCounts.TBC }
                      } if statusCounts.TBC > 0,
                      {
                        key: { text: "OTHER" },
                        value: { text: statusCounts.OTHER }
                      } if statusCounts.OTHER > 0
                    ] | selectattr("key") | list,
                    classes: "govuk-summary-list--no-border"
                  }) }}
                  
                  {% if statusCounts.RED == 0 and statusCounts.AMBER == 0 and statusCounts.GREEN == 0 and statusCounts.GREEN_AMBER == 0 and statusCounts.TBC == 0 and statusCounts.OTHER == 0 %}
                    <p class="govuk-body">No projects to display.</p>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="govuk-table-container">
          <table class="govuk-table">
            <caption class="govuk-table__caption govuk-table__caption--m">
              {% if searchTerm %}
                Search results - Project insights and analytics
              {% else %}
                Project insights and analytics
              {% endif %}
            </caption>
            <thead class="govuk-table__head">
              <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header sortable" data-sort="text">Project name</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="number">Standards completed</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="number">R</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="number">A</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="number">G</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="number">All standards score</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="number">Completed standards score</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="rag">Manual RAG</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="rag">Lowest RAG</th>
                <th scope="col" class="govuk-table__header sortable" data-sort="date">Last updated</th>
              </tr>
            </thead>
            <tbody class="govuk-table__body">
              {% for project in projects %}
                {% set redCount = 0 %}
                {% set amberCount = 0 %}
                {% set greenCount = 0 %}
                {% if project.standardsSummary %}
                  {% for standard in project.standardsSummary %}
                    {% if standard.aggregatedStatus == 'RED' %}
                      {% set redCount = redCount + 1 %}
                    {% elif standard.aggregatedStatus == 'AMBER' %}
                      {% set amberCount = amberCount + 1 %}
                    {% elif standard.aggregatedStatus == 'GREEN' %}
                      {% set greenCount = greenCount + 1 %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
                
                <tr class="govuk-table__row">
                  <td class="govuk-table__cell">
                    <a href="/projects/{{ project.id }}" class="govuk-link">{{ project.name }}</a>
                  </td>
                  <td class="govuk-table__cell">
                    {% if project.projectStatus %}
                      {{ project.projectStatus.numberOfStandardsCompleted }}/14
                    {% else %}
                      <span class="govuk-hint">No data available</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell govuk-table__cell--numeric">
                    {% if redCount > 0 %}
                      {{ govukTag({ text: redCount, classes: "govuk-tag--red" }) }}
                    {% else %}
                      <span class="govuk-body-s">0</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell govuk-table__cell--numeric">
                    {% if amberCount > 0 %}
                      {{ govukTag({ text: amberCount, classes: "govuk-tag--yellow" }) }}
                    {% else %}
                      <span class="govuk-body-s">0</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell govuk-table__cell--numeric">
                    {% if greenCount > 0 %}
                      {{ govukTag({ text: greenCount, classes: "govuk-tag--green" }) }}
                    {% else %}
                      <span class="govuk-body-s">0</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell">
                    {% if project.projectStatus %}
                      <div class="progress-bar">
                        <div class="progress-bar__fill" style="width: {{ project.projectStatus.percentageAcrossAllStandards }}%"></div>
                      </div>
                      <span class="govuk-body-s">{{ project.projectStatus.percentageAcrossAllStandards }}%</span>
                    {% else %}
                      <span class="govuk-hint">No data</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell">
                    {% if project.projectStatus %}
                      <div class="progress-bar">
                        <div class="progress-bar__fill progress-bar__fill--quality" style="width: {{ project.projectStatus.percentageAcrossCompletedStandards }}%"></div>
                      </div>
                      <span class="govuk-body-s">{{ project.projectStatus.percentageAcrossCompletedStandards }}%</span>
                    {% else %}
                      <span class="govuk-hint">No data</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell">
                    {{ renderStatusTag(project.status) }}
                  </td>
                  <td class="govuk-table__cell">
                    {% if project.projectStatus and project.projectStatus.lowestRag %}
                      {{ renderStatusTag(project.projectStatus.lowestRag) }}
                    {% else %}
                      <span class="govuk-hint">No data</span>
                    {% endif %}
                  </td>
                  <td class="govuk-table__cell">
                    {% if project.lastUpdated %}
                      <span class="govuk-body-s">{{ project.lastUpdated | formatDate }}</span>
                    {% else %}
                      <span class="govuk-hint">No date</span>
                    {% endif %}
                  </td>
                </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
      {% elif not searchTerm %}
        <p class="govuk-body">No projects available.</p>
      {% endif %}
    </div>
  </div>
{% endblock %}

{% block pageStyles %}
<style>
  .govuk-table-container {
    overflow-x: auto;
  }
  
  .progress-bar {
    width: 60px;
    height: 12px;
    background-color: #f3f2f1;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 4px;
  }
  
  .progress-bar__fill {
    height: 100%;
    background-color: #00703c;
    transition: width 0.3s ease;
  }
  
  .progress-bar__fill--quality {
    background-color: #1d70b8;
  }
  
  /* Sortable table styles */
  .sortable {
    cursor: pointer;
    position: relative;
    user-select: none;
  }
  
  .sortable:hover {
    background-color: #f3f2f1;
  }
  
  .sortable::after {
    content: '↕';
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.5;
    font-size: 12px;
  }
  
  .sortable.sort-asc::after {
    content: '↑';
    opacity: 1;
  }
  
  .sortable.sort-desc::after {
    content: '↓';
    opacity: 1;
  }
  
  .sortable:focus {
    outline: 3px solid #ffdd00;
    outline-offset: 0;
    box-shadow: inset 0 0 0 2px #0b0c0c;
  }
  
  /* Consistent tag sizing for both single and stacked RAG tags */
  .govuk-table .govuk-tag {
    font-size: 12px;
    padding: 3px 7px;
    margin: 0;
  }
  
  /* Fix for multiple RAG tags */
  .app-tag-list {
    display: flex;
    flex-direction: column;
    gap: 2px;
    align-items: flex-start;
  }
  
  .app-tag-list .govuk-tag {
    min-width: 50px;
    text-align: center;
    box-sizing: border-box;
  }
  
  @media (max-width: 768px) {
    .govuk-table__header,
    .govuk-table__cell {
      padding: 8px 4px;
      font-size: 14px;
    }
    
    .progress-bar {
      width: 40px;
      height: 8px;
    }
    
    .sortable::after {
      right: 4px;
      font-size: 10px;
    }
  }
</style>
{% endblock %}

{% block pageScripts %}
<script>
  (function() {
    // Store event handlers in variables for cleanup
    let formSubmitHandler = null;
    let domContentLoadedHandler = null;
    let sortHandlers = [];

    // Table sorting functionality
    function initTableSort() {
      const table = document.querySelector('.govuk-table');
      if (!table) return;

      const headers = table.querySelectorAll('.sortable');
      
      headers.forEach((header, index) => {
        // Make headers keyboard accessible
        header.setAttribute('tabindex', '0');
        header.setAttribute('role', 'button');
        header.setAttribute('aria-label', `Sort by ${header.textContent.trim()}`);
        
        const clickHandler = (e) => sortTable(index, header);
        const keyHandler = (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            sortTable(index, header);
          }
        };
        
        header.addEventListener('click', clickHandler);
        header.addEventListener('keydown', keyHandler);
        
        // Store handlers for cleanup
        sortHandlers.push({ element: header, click: clickHandler, key: keyHandler });
      });
    }

    function sortTable(columnIndex, header) {
      const table = document.querySelector('.govuk-table');
      const tbody = table.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      const sortType = header.getAttribute('data-sort');
      
      // Determine sort direction
      const currentSort = header.classList.contains('sort-asc') ? 'asc' : 
                         header.classList.contains('sort-desc') ? 'desc' : '';
      
      // For RAG columns, default to ascending (worst statuses first: RED=1, PENDING=6)
      // For other columns, default to ascending as normal
      let newSort;
      if (currentSort === '') {
        // First click - for RAG columns, show worst first (ascending: 1,2,3,5,6)
        newSort = 'asc';
      } else {
        // Subsequent clicks - toggle direction
        newSort = currentSort === 'asc' ? 'desc' : 'asc';
      }
      
      // Clear all sort classes
      document.querySelectorAll('.sortable').forEach(h => {
        h.classList.remove('sort-asc', 'sort-desc');
        h.setAttribute('aria-label', `Sort by ${h.textContent.trim()}`);
      });
      
      // Set new sort class and aria-label
      header.classList.add(`sort-${newSort}`);
      header.setAttribute('aria-label', `Sort by ${header.textContent.trim()} (${newSort}ending)`);
      
      // Sort rows
      rows.sort((a, b) => {
        const aVal = getCellValue(a, columnIndex, sortType);
        const bVal = getCellValue(b, columnIndex, sortType);
        
        let result = 0;
        if (sortType === 'number' || sortType === 'rag') {
          // For numbers and RAG values (which return numeric sort orders)
          result = parseFloat(aVal || 0) - parseFloat(bVal || 0);
        } else if (sortType === 'date') {
          const aDate = new Date(aVal || 0);
          const bDate = new Date(bVal || 0);
          result = aDate.getTime() - bDate.getTime();
        } else {
          result = (aVal || '').localeCompare(bVal || '');
        }
        
        return newSort === 'desc' ? -result : result;
      });
      
      // Reorder rows in DOM
      rows.forEach(row => tbody.appendChild(row));
    }

    function getCellValue(row, columnIndex, sortType) {
      const cell = row.children[columnIndex];
      if (!cell) return '';
      
      // Handle different cell contents
      if (sortType === 'number') {
        // For progress bars and percentages
        const percentMatch = cell.textContent.match(/(\d+(?:\.\d+)?)%/);
        if (percentMatch) return percentMatch[1];
        
        // For fractions like "8/14"
        const fractionMatch = cell.textContent.match(/(\d+)\/\d+/);
        if (fractionMatch) return fractionMatch[1];
        
        // For plain numbers (tag content)
        const numberMatch = cell.textContent.match(/\d+/);
        if (numberMatch) return numberMatch[0];
        
        return '0';
      } else if (sortType === 'date') {
        // Extract date from cell, handle "No date" case
        const dateText = cell.textContent.trim();
        return dateText === 'No date' ? '' : dateText;
      } else if (sortType === 'rag') {
        // Special handling for RAG status sorting
        const cellText = cell.textContent.trim().toUpperCase();
        
        // Map RAG values to sort order (lower numbers = higher priority when sorting)
        // Scale: Red, Amber Red, Amber, Green Amber, Green, Pending
        // Use array to ensure we check most specific patterns first
        // Scale: Pending (needs assessment), Red, Amber Red, Amber, Green Amber, Green
        const ragMapping = [
          { pattern: 'AMBERRED', order: 3 },      // Compound tag renders as concatenated text
          { pattern: 'AMBER_RED', order: 3 },     // Third priority
          { pattern: 'AMBER RED', order: 3 },     // Handle both formats
          { pattern: 'GREENAMBER', order: 5 },    // Compound tag renders as concatenated text  
          { pattern: 'GREEN_AMBER', order: 5 },   // Check this before "GREEN" and "AMBER"
          { pattern: 'GREEN/AMBER', order: 5 },   // Handle both formats
          { pattern: 'GREEN AMBER', order: 5 },
          { pattern: 'PENDING', order: 1 },       // Highest priority - needs assessment
          { pattern: 'RED', order: 2 },           // Second priority - assessed but failing
          { pattern: 'AMBER', order: 4 },         // Check after compound patterns
          { pattern: 'GREEN', order: 6 }          // Lowest priority - assessed and good
        ];
        
        // Find the first matching pattern (most specific wins)
        for (const mapping of ragMapping) {
          if (cellText.includes(mapping.pattern)) {
            return mapping.order;
          }
        }
        
        // Default for unrecognized patterns
        return 999;
      } else {
        // For other text, get the visible text
        return cell.textContent.trim();
      }
    }

    // Initialize autocomplete and form handling
    domContentLoadedHandler = function() {
      // Create a source array with project names and IDs for easy lookup
      const projects = {{ projects | dump | safe }};
      const projectsById = {};
      const projectsByName = {};
      
      // Create lookup maps for faster access
      projects.forEach(project => {
        projectsById[project.id] = project;
        projectsByName[project.name] = project;
      });
      
      // Create a list of project names for the autocomplete
      const projectNames = projects.map(project => project.name);
      
      // Initialize the GOV.UK accessible autocomplete
      accessibleAutocomplete({
        element: document.querySelector('#search-container'),
        id: 'search',
        name: 'search',
        defaultValue: '{{ searchTerm }}',
        source: projectNames,
        placeholder: 'Start typing to search',
        autoselect: false,
        confirmOnBlur: false,
        showNoOptionsFound: true,
        minLength: 2,
        displayMenu: 'overlay',
        onConfirm: function(selectedProjectName) {
          // Always submit the form when a value is confirmed (either by selection or Enter)
          const form = document.querySelector('form[method="GET"]');
          
          if (selectedProjectName && selectedProjectName.trim()) {
            // Check if this is an exact project match for direct navigation
            const project = projectsByName[selectedProjectName];
            if (project && project.id && selectedProjectName === project.name) {
              // Direct navigation for exact matches
              window.location.href = `/projects/${project.id}`;
              return;
            }
          }
          
          // For all other cases (partial matches, no matches, or any text), submit the form
          if (form) {
            // Use a small timeout to ensure the input value is properly set
            setTimeout(() => {
              form.submit();
            }, 50);
          }
        },
        tNoResults: function() { 
          return 'No projects found';
        },
        tStatusQueryTooShort: function(minQueryLength) {
          return `Type in ${minQueryLength} or more characters for results`;
        }
      });
      
      const form = document.querySelector('form[method="GET"]');
      
      // Handle form submission for search functionality
      if (form) {
        formSubmitHandler = function(event) {
          const searchInput = document.querySelector('#search');
          
          // If search input is empty, redirect to insights page
          if (searchInput && !searchInput.value.trim()) {
            event.preventDefault();
            window.location.href = '/insights';
            return;
          }
          
          // If search input has value, allow normal form submission
          // No need to prevent default - let the form submit normally with GET parameters
        };
        
        form.addEventListener('submit', formSubmitHandler);
      }
      
      // Add fallback Enter key handler after autocomplete is initialized
      setTimeout(() => {
        const searchInputElement = document.querySelector('#search');
        if (searchInputElement) {
          searchInputElement.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
              event.preventDefault(); // Prevent default to avoid double submission
              // Submit the form after a small delay
              setTimeout(() => {
                if (this.value && this.value.trim()) {
                  const form = document.querySelector('form[method="GET"]');
                  if (form) {
                    form.submit();
                  }
                }
              }, 50);
            }
          });
        }
      }, 200); // Wait for autocomplete to be fully initialized
      
      // Initialize table sorting
      initTableSort();
    };

    // Event listener setup
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', domContentLoadedHandler);
    } else {
      domContentLoadedHandler();
    }

    // Cleanup function
    window.addEventListener('beforeunload', function() {
      // Clean up form handlers
      if (formSubmitHandler) {
        const form = document.querySelector('form[method="GET"]');
        if (form) {
          form.removeEventListener('submit', formSubmitHandler);
        }
      }
      
      // Clean up sort handlers
      sortHandlers.forEach(handler => {
        handler.element.removeEventListener('click', handler.click);
        handler.element.removeEventListener('keydown', handler.key);
      });
      
      if (domContentLoadedHandler) {
        document.removeEventListener('DOMContentLoaded', domContentLoadedHandler);
      }
    });
  })();
</script>
{% endblock %} 