{% extends "layouts/page.njk" %}

{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/error-message/macro.njk" import govukErrorMessage %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}
{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <h1 class="govuk-heading-xl">
        {% if isEditMode %}
          Edit Assessment
        {% else %}
          Add Service Standard update
        {% endif %}
      </h1>
    </div>
  </div>

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      {% if error %}
        <div class="govuk-error-summary" data-module="govuk-error-summary">
          <div role="alert">
            <h2 class="govuk-error-summary__title">There is a problem</h2>
            <div class="govuk-error-summary__body">
              <ul class="govuk-list govuk-error-summary__list">
                <li><a href="#professionId">{{ error }}</a></li>
              </ul>
            </div>
          </div>
        </div>
      {% endif %}

      {% if not isEditMode %}
        {{ govukInsetText({
          text: "Standards available in the dropdown will be filtered based on your selected profession and the project's current phase" + (" (" + (projectPhase if projectPhase else "not set") + ")") + "."
        }) }}
      {% else %}
        {{ govukInsetText({
          text: "You can update the status and commentary for this assessment. The profession and standard cannot be changed."
        }) }}
      {% endif %}

      <form method="POST" action="/projects/{{ projectId }}/assessment{% if isEditMode %}?edit=true{% endif %}" novalidate>
        
        {% if isEditMode %}
          <!-- In edit mode, show readonly fields with hidden inputs -->
          {% set selectedProfessionText = 'Unknown' %}
          {% set selectedStandardText = 'Unknown' %}
          
          {% for item in professionItems %}
            {% if item.selected %}
              {% set selectedProfessionText = item.text %}
            {% endif %}
          {% endfor %}
          
          {% for item in standardItems %}
            {% if item.selected %}
              {% set selectedStandardText = item.text %}
            {% endif %}
          {% endfor %}
          
          <div class="govuk-form-group">
            <label class="govuk-label govuk-label--m" for="profession-readonly">
              Select Profession
            </label>
            <input class="govuk-input" id="profession-readonly" type="text" value="{{ selectedProfessionText }}" readonly style="background-color: #f3f2f1; cursor: not-allowed;">
            <input type="hidden" name="professionId" value="{{ selectedValues.professionId }}">
          </div>

          <div class="govuk-form-group">
            <label class="govuk-label govuk-label--m" for="standard-readonly">
              Select Service Standard
            </label>
            <p class="govuk-hint">Only standards relevant to the selected profession in this project phase are shown.</p>
            <input class="govuk-input" id="standard-readonly" type="text" value="{{ selectedStandardText }}" readonly style="background-color: #f3f2f1; cursor: not-allowed;">
            <input type="hidden" name="standardId" value="{{ selectedValues.standardId }}">
          </div>
        {% else %}
          {{ govukSelect({
            id: "professionId",
            name: "professionId",
            label: {
              text: "Select Profession",
              classes: "govuk-label--m"
            },
            items: professionItems,
            value: selectedValues.professionId if selectedValues else "",
            errorMessage: { text: error } if error else false
          }) }}

          {{ govukSelect({
            id: "standardId", 
            name: "standardId",
            label: {
              text: "Select Service Standard",
              classes: "govuk-label--m"
            },
            items: standardItems,
            value: selectedValues.standardId if selectedValues else "",
            hint: {
              text: "Only standards relevant to the selected profession in this project phase are shown."
            }
          }) }}
        {% endif %}

        <!-- Help section for the selected service standard -->
        <div id="standard-help" class="govuk-!-margin-top-4 govuk-!-margin-bottom-4" style="display: none;">
          <div id="standard-help-content">
            <!-- Content will be populated by JavaScript -->
          </div>
        </div>

        {{ govukSelect({
          id: "status",
          name: "status", 
          label: {
            text: "Service Standard status",
            classes: "govuk-label--m"
          },
          items: [
            {
              value: "",
              text: "Choose status",
              selected: not (selectedValues and selectedValues.status)
            },
            {
              value: "RED",
              text: "Red",
              selected: selectedValues and selectedValues.status === "RED"
            },
            {
              value: "AMBER",
              text: "Amber", 
              selected: selectedValues and selectedValues.status === "AMBER"
            },
            {
              value: "GREEN",
              text: "Green",
              selected: selectedValues and selectedValues.status === "GREEN"
            },
            {
              value: "TBC",
              text: "TBC",
              selected: selectedValues and selectedValues.status === "TBC"
            }
          ],
          value: selectedValues.status if selectedValues else ""
        }) }}

        <!-- Green status commentary -->
        <div id="green-commentary" class="govuk-form-group" style="display: none;">
          {{ govukTextarea({
            name: "green-text",
            id: "commentary-green",
            label: {
              text: "What's in place or being worked on?",
              classes: "govuk-label--m"
            },
            hint: {
              text: "What's in place or being worked on that demonstrates compliance"
            },
            value: (selectedValues.commentary if (selectedValues and selectedValues.status === "GREEN") else ""),
            rows: 5
          }) }}
        </div>

        <!-- Non-green status commentary (two fields) -->
        <div id="non-green-commentary" class="govuk-form-group" style="display: none;">
          {% set issueValue = "" %}
          {% set pathValue = "" %}
          {% if selectedValues and selectedValues.commentary and selectedValues.status !== "GREEN" %}
            {% if "Path to green:" in selectedValues.commentary %}
              {% set commentaryParts = selectedValues.commentary.split("Path to green:") %}
              {% if commentaryParts.length > 1 %}
                {% set issueValue = commentaryParts[0] | trim %}
                {% set pathValue = commentaryParts[1] | trim %}
              {% else %}
                {% set issueValue = selectedValues.commentary %}
              {% endif %}
            {% else %}
              {% set issueValue = selectedValues.commentary %}
            {% endif %}
          {% endif %}
          
          {{ govukTextarea({
            name: "issue-text",
            id: "issue-description",
            label: {
              text: "Describe the issue",
              classes: "govuk-label--m"
            },
            hint: {
              text: "Describe the issue. Example: 'Team lacks content designer.'"
            },
            value: issueValue,
            rows: 3
          }) }}

          {{ govukTextarea({
            name: "path-text",
            id: "path-to-green",
            label: {
              text: "Path to green",
              classes: "govuk-label--m"
            },
            hint: {
              text: "Path to green. Example: 'borrow content designer from Defra DDTS'"
            },
            value: pathValue,
            rows: 3
          }) }}
        </div>

        <!-- Hidden field for the actual commentary that gets sent to backend -->
        <input type="hidden" name="commentary" id="final-commentary" value="{{ selectedValues.commentary if selectedValues else '' }}">

        <div class="govuk-button-group">
          {{ govukButton({
            text: "Save update" if not isEditMode else "Update assessment"
          }) }}

          {{ govukButton({
            text: "Cancel",
            href: "/projects/" + projectId + (("/standards/" + selectedValues.standardId) if isEditMode and selectedValues.standardId else ""),
            classes: "govuk-button--secondary"
          }) }}
        </div>
      </form>
    </div>
  </div>

  <script>
    // Pass data from server to client with proper JSON encoding
    const allStandards = {%- if allStandards -%}{{ allStandards | safe }}{%- else -%}[]{%- endif -%};
    const projectPhase = "{{ projectPhase }}";
    const professionStandardMatrix = {%- if professionStandardMatrix -%}{{ professionStandardMatrix | safe }}{%- else -%}{}{%- endif -%};
    const isEditMode = {{ 'true' if isEditMode else 'false' }};
    const serviceStandardChecklists = {%- if serviceStandardChecklists -%}{{ serviceStandardChecklists | safe }}{%- else -%}{}{%- endif -%};

    // Get DOM elements
    const professionSelect = document.getElementById('professionId');
    const standardSelect = document.getElementById('standardId');
    const statusSelect = document.getElementById('status');
    const greenCommentary = document.getElementById('green-commentary');
    const nonGreenCommentary = document.getElementById('non-green-commentary');
    const form = document.querySelector('form');

    // Function to get standard number from standard ID
    function getStandardNumber(standardId) {
      if (!standardId || !allStandards) return null;
      
      const standard = allStandards.find(s => s.id === standardId);
      return standard ? standard.number : null;
    }

    // Function to update help section based on selected standard
    function updateStandardHelp(standardId) {
      const helpSection = document.getElementById('standard-help');
      const helpContent = document.getElementById('standard-help-content');
      
      if (!standardId) {
        helpSection.style.display = 'none';
        return;
      }
      
      const standardNumber = getStandardNumber(standardId);
      const checklist = serviceStandardChecklists[standardNumber];
      
      if (!checklist) {
        helpSection.style.display = 'none';
        return;
      }
      
      // Create the details component HTML
      const checklistItems = checklist.checklist.map(item => 
        `<li class="govuk-list__item">${item}</li>`
      ).join('');
      
      const detailsHtml = `
        <details class="govuk-details">
          <summary class="govuk-details__summary">
            <span class="govuk-details__summary-text">
              Help with this Service Standard
            </span>
          </summary>
          <div class="govuk-details__text">
            <h3 class="govuk-heading-s">
              <a href="${checklist.url}" class="govuk-link" target="_blank" rel="noopener noreferrer">
                ${standardNumber}. ${checklist.title} (opens in new tab)
              </a>
            </h3>
            <p class="govuk-body">Consider the following when updating this standard:</p>
            <ul class="govuk-list govuk-list--bullet">
              ${checklistItems}
            </ul>
          </div>
        </details>
      `;
      
      helpContent.innerHTML = detailsHtml;
      helpSection.style.display = 'block';
    }

    // Function to fetch current assessment and pre-populate form fields
    async function fetchCurrentAssessment(professionId, standardId) {
      if (!professionId || !standardId) {
        clearFormFields();
        return;
      }
      
      try {
        const response = await fetch(`/projects/{{ projectId }}/standards/${standardId}/professions/${professionId}/assessment`);
        
        if (response.ok) {
          const assessment = await response.json();
          if (assessment) {
            populateFormFields(assessment);
          } else {
            clearFormFields();
          }
        } else {
          clearFormFields();
        }
      } catch (error) {
        console.log('Could not fetch current assessment:', error);
        clearFormFields();
      }
    }
    
    // Function to populate form fields with current assessment data
    function populateFormFields(assessment) {
      // Set the status dropdown
      if (assessment.status && statusSelect) {
        statusSelect.value = assessment.status;
        // Trigger change event to show/hide appropriate commentary fields
        updateCommentaryFields();
      }
      
      // Handle commentary based on status
      if (assessment.commentary) {
        if (assessment.status === 'GREEN') {
          // For green status, put commentary in the green commentary field
          const greenCommentary = document.getElementById('commentary-green');
          if (greenCommentary) {
            greenCommentary.value = assessment.commentary;
          }
        } else {
          // For non-green status, split commentary by "Path to green:" if present
          const commentary = assessment.commentary;
          if (commentary.includes('Path to green:')) {
            const parts = commentary.split('Path to green:');
            const issue = parts[0] ? parts[0].trim() : '';
            const path = parts[1] ? parts[1].trim() : '';
            
            const issueField = document.getElementById('issue-description');
            const pathField = document.getElementById('path-to-green');
            
            if (issueField) issueField.value = issue;
            if (pathField) pathField.value = path;
          } else {
            // No "Path to green:" separator, put all in issue description
            const issueField = document.getElementById('issue-description');
            if (issueField) issueField.value = commentary;
          }
        }
        
        // Update the combined commentary field
        updateCommentaryField();
      }
    }
    
    // Function to clear form fields
    function clearFormFields() {
      if (statusSelect) {
        statusSelect.value = '';
      }
      
      const greenCommentary = document.getElementById('commentary-green');
      const issueField = document.getElementById('issue-description');
      const pathField = document.getElementById('path-to-green');
      
      if (greenCommentary) greenCommentary.value = '';
      if (issueField) issueField.value = '';
      if (pathField) pathField.value = '';
      
      // Update commentary fields visibility and combined field
      updateCommentaryFields();
      updateCommentaryField();
    }

    // Function to update standards dropdown based on selected profession
    function updateStandardsDropdown() {
      const selectedProfession = professionSelect.value;
      
      // Clear current options
      standardSelect.innerHTML = '<option value="">Choose a service standard</option>';
      
      if (!selectedProfession || !projectPhase || projectPhase === '') {
        clearFormFields();
        return;
      }

      // Get available standards for this profession and phase
      const phaseMatrix = professionStandardMatrix[projectPhase];
      const availableStandardNumbers = phaseMatrix?.[selectedProfession] || [];
      
      // Filter and add standards - with flexible checking
      if (!allStandards || (!Array.isArray(allStandards) && !allStandards.length)) {
        return;
      }
      
      // Ensure we can call filter on the data
      let standardsArray = allStandards;
      if (!Array.isArray(allStandards) && allStandards.length) {
        // Try to convert if it's array-like but not detected as array
        standardsArray = Array.from(allStandards);
      }
      
      const filteredStandards = standardsArray.filter(standard => {
        const standardNumber = standard.number || parseInt(standard.name?.match(/^\d+/)?.[0]);
        return availableStandardNumbers.includes(standardNumber);
      });

      // Add filtered standards to dropdown
      filteredStandards.forEach(standard => {
        const option = document.createElement('option');
        option.value = standard.id;
        option.textContent = `${standard.number}. ${standard.name}`;
        standardSelect.appendChild(option);
      });

      // If no standards available, show message
      if (filteredStandards.length === 0) {
        const option = document.createElement('option');
        option.value = '';
        option.textContent = 'No standards available for this profession in this phase';
        option.disabled = true;
        standardSelect.appendChild(option);
      }
      
      // Update help section and check for current assessment
      updateStandardHelp(standardSelect.value);
              if (standardSelect.value) {
          fetchCurrentAssessment(selectedProfession, standardSelect.value);
        } else {
          clearFormFields();
        }
    }

    // Function to show/hide commentary fields based on status
    function updateCommentaryFields() {
      const selectedStatus = statusSelect.value;
      
      if (selectedStatus === 'GREEN') {
        greenCommentary.style.display = 'block';
        nonGreenCommentary.style.display = 'none';
      } else if (selectedStatus && selectedStatus !== '') {
        greenCommentary.style.display = 'none';
        nonGreenCommentary.style.display = 'block';
      } else {
        greenCommentary.style.display = 'none';
        nonGreenCommentary.style.display = 'none';
      }
    }

    // Function to combine commentary fields before submission
    function combineCommentaryFields() {
      const selectedStatus = statusSelect.value;
      const finalCommentaryField = document.getElementById('final-commentary');
      
      if (selectedStatus === 'GREEN') {
        // For green status, use the single commentary field
        const greenText = document.getElementById('commentary-green').value;
        finalCommentaryField.value = greenText;
      } else if (selectedStatus && selectedStatus !== '') {
        // For non-green status, combine the two fields
        const issueText = document.getElementById('issue-description').value;
        const pathText = document.getElementById('path-to-green').value;
        
        let combinedText = '';
        if (issueText.trim()) {
          combinedText += issueText.trim();
        }
        if (pathText.trim()) {
          if (combinedText) combinedText += '\n\nPath to green: ';
          else combinedText += 'Path to green: ';
          combinedText += pathText.trim();
        }
        
        finalCommentaryField.value = combinedText;
      }
    }

    // Function to update commentary field in real-time as user types
    function updateCommentaryField() {
      combineCommentaryFields();
    }

    // Initialize after DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Convert string to boolean
      const editMode = isEditMode === 'true';
      
      // Add event listeners
      if (!editMode) {
        // Only add dropdown change listeners in non-edit mode
        if (professionSelect) {
          professionSelect.addEventListener('change', updateStandardsDropdown);
        }
        if (standardSelect) {
          standardSelect.addEventListener('change', function() {
            updateStandardHelp(this.value);
            if (this.value && professionSelect.value) {
              fetchCurrentAssessment(professionSelect.value, this.value);
            } else {
              clearFormFields();
            }
          });
        }
      }
      
      // Always add status and form listeners
      statusSelect.addEventListener('change', updateCommentaryFields);
      form.addEventListener('submit', combineCommentaryFields);

      // Add real-time update listeners for commentary fields
      document.getElementById('commentary-green').addEventListener('input', updateCommentaryField);
      document.getElementById('issue-description').addEventListener('input', updateCommentaryField);
      document.getElementById('path-to-green').addEventListener('input', updateCommentaryField);

      // Initialize on page load
      if (!editMode && professionSelect && professionSelect.value) {
        updateStandardsDropdown();
      }
      
      // For edit mode, show help and current assessment for the pre-selected standard
      if (editMode) {
        const selectedStandardId = '{{ selectedValues.standardId if selectedValues else "" }}';
        const selectedProfessionId = '{{ selectedValues.professionId if selectedValues else "" }}';
        if (selectedStandardId) {
          updateStandardHelp(selectedStandardId);
          // In edit mode, form fields are already pre-populated, so no need to fetch current assessment
        }
      }
      
      // Force trigger update
      updateCommentaryFields();
      
      // Additional safeguard for edit mode with a short delay
      if (editMode) {
        setTimeout(function() {
          updateCommentaryFields();
        }, 100);
      }
    });
  </script>
{% endblock %}
