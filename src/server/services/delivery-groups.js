import { authedFetchJsonDecorator } from '~/src/server/common/helpers/fetch/authed-fetch-json.js'
import { config } from '~/src/config/config.js'

// Constants
const API_VERSION_KEY = 'api.version'

// API endpoint constants
const getDeliveryGroupsEndpoint = (apiVersion) =>
  `/api/${apiVersion}/deliverygroups`
const getDeliveryGroupByIdEndpoint = (apiVersion, id) =>
  `/api/${apiVersion}/deliverygroups/${id}`

export const getDeliveryGroups = async (request) => {
  request.logger?.info('Fetching active delivery groups from API')

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    const response = await authedFetch(getDeliveryGroupsEndpoint(apiVersion))

    // Filter to only active groups and sort by creation date (newest first)
    // Handle both PascalCase and camelCase for IsActive field
    return (response || [])
      .filter((group) => group.IsActive === true || group.isActive === true)
      .sort(
        (a, b) =>
          new Date(b.CreatedAt || b.createdAt) -
          new Date(a.CreatedAt || a.createdAt)
      )
  } catch (error) {
    request.logger?.error({ error }, 'Failed to fetch delivery groups from API')
    throw error
  }
}

export const getAllDeliveryGroups = async (request) => {
  request.logger?.info(
    'Fetching all delivery groups including archived from API'
  )

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    const response = await authedFetch(getDeliveryGroupsEndpoint(apiVersion))

    // Return all groups (active and archived) sorted by creation date (newest first)
    return (response || []).sort(
      (a, b) => new Date(b.CreatedAt) - new Date(a.CreatedAt)
    )
  } catch (error) {
    request.logger?.error(
      { error },
      'Failed to fetch all delivery groups from API'
    )
    throw error
  }
}

export const getDeliveryGroupById = async (id, request) => {
  request.logger?.info({ id }, 'Fetching delivery group by ID from API')

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    const response = await authedFetch(
      getDeliveryGroupByIdEndpoint(apiVersion, id)
    )

    if (!response) {
      throw new Error(`Delivery group with ID ${id} not found`)
    }

    return response
  } catch (error) {
    request.logger?.error(
      { error, id },
      'Failed to fetch delivery group by ID from API'
    )
    throw error
  }
}

export const createDeliveryGroup = async (groupData, request) => {
  request.logger?.info({ groupData }, 'Creating delivery group via API')

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    // Note: The ID should be generated by the frontend calling this function
    // following the same pattern as professions and service standards
    const response = await authedFetch(getDeliveryGroupsEndpoint(apiVersion), {
      method: 'POST',
      body: JSON.stringify(groupData)
    })

    return response
  } catch (error) {
    request.logger?.error(
      { error, groupData },
      'Failed to create delivery group via API'
    )
    throw error
  }
}

export const updateDeliveryGroup = async (id, updateData, request) => {
  request.logger?.info({ id, updateData }, 'Updating delivery group via API')

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    // Get the existing delivery group first
    const existingGroup = await getDeliveryGroupById(id, request)

    // Create the update payload using the existing structure
    const updatePayload = {
      ...existingGroup,
      ...updateData
    }

    const response = await authedFetch(
      getDeliveryGroupByIdEndpoint(apiVersion, id),
      {
        method: 'PUT',
        body: JSON.stringify(updatePayload)
      }
    )

    return response
  } catch (error) {
    request.logger?.error(
      { error, id, updateData },
      'Failed to update delivery group via API'
    )
    throw error
  }
}

export const deleteDeliveryGroup = async (id, request) => {
  request.logger?.info({ id }, 'Archiving delivery group via API')

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    // Get the existing delivery group first
    const existingGroup = await getDeliveryGroupById(id, request)

    // Create the archive payload (set IsActive to false)
    const archivePayload = {
      ...existingGroup,
      IsActive: false,
      UpdatedAt: new Date().toISOString()
    }

    const response = await authedFetch(
      getDeliveryGroupByIdEndpoint(apiVersion, id),
      {
        method: 'PUT',
        body: JSON.stringify(archivePayload)
      }
    )

    return response
  } catch (error) {
    request.logger?.error(
      { error, id },
      'Failed to archive delivery group via API'
    )
    throw error
  }
}

export const restoreDeliveryGroup = async (id, request) => {
  request.logger?.info({ id }, 'Restoring delivery group via API')

  try {
    const authedFetch = authedFetchJsonDecorator(request)
    const apiVersion = config.get(API_VERSION_KEY)

    // Get the existing delivery group first
    const existingGroup = await getDeliveryGroupById(id, request)

    // Create the restore payload (set IsActive to true)
    const restorePayload = {
      ...existingGroup,
      IsActive: true,
      UpdatedAt: new Date().toISOString()
    }

    const response = await authedFetch(
      getDeliveryGroupByIdEndpoint(apiVersion, id),
      {
        method: 'PUT',
        body: JSON.stringify(restorePayload)
      }
    )

    return response
  } catch (error) {
    request.logger?.error(
      { error, id },
      'Failed to restore delivery group via API'
    )
    throw error
  }
}
