{% extends "layouts/page.njk" %}

{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/error-message/macro.njk" import govukErrorMessage %}
{% from "govuk/components/inset-text/macro.njk" import govukInsetText %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      <h1 class="govuk-heading-xl">Add Service Standard update</h1>
    </div>
  </div>

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      {% if error %}
        <div class="govuk-error-summary" data-module="govuk-error-summary">
          <div role="alert">
            <h2 class="govuk-error-summary__title">There is a problem</h2>
            <div class="govuk-error-summary__body">
              <ul class="govuk-list govuk-error-summary__list">
                <li><a href="#professionId">{{ error }}</a></li>
              </ul>
            </div>
          </div>
        </div>
      {% endif %}

      {{ govukInsetText({
        text: "Standards available in the dropdown will be filtered based on your selected profession and the project's current phase (" + projectPhase + ")."
      }) }}

      <form method="POST" action="/projects/{{ projectId }}/assessment" novalidate>
        
        {{ govukSelect({
          id: "professionId",
          name: "professionId",
          label: {
            text: "Select Profession",
            classes: "govuk-label--m"
          },
          items: professionItems,
          value: selectedValues.professionId if selectedValues else "",
          errorMessage: { text: error } if error else false
        }) }}

        {{ govukSelect({
          id: "standardId", 
          name: "standardId",
          label: {
            text: "Select Service Standard",
            classes: "govuk-label--m"
          },
          items: standardItems,
          value: selectedValues.standardId if selectedValues else "",
          hint: {
            text: "Only standards relevant to the selected profession in this project phase are shown."
          }
        }) }}

        {{ govukSelect({
          id: "status",
          name: "status", 
          label: {
            text: "Service Standard status",
            classes: "govuk-label--m"
          },
          items: [
            {
              value: "",
              text: "Choose status",
              selected: not (selectedValues and selectedValues.status)
            },
            {
              value: "RED",
              text: "Red",
              selected: selectedValues and selectedValues.status === "RED"
            },
            {
              value: "AMBER_RED", 
              text: "Amber/Red",
              selected: selectedValues and selectedValues.status === "AMBER_RED"
            },
            {
              value: "AMBER",
              text: "Amber", 
              selected: selectedValues and selectedValues.status === "AMBER"
            },
            {
              value: "GREEN_AMBER",
              text: "Green/Amber",
              selected: selectedValues and selectedValues.status === "GREEN_AMBER"
            },
            {
              value: "GREEN",
              text: "Green",
              selected: selectedValues and selectedValues.status === "GREEN"
            },
            {
              value: "TBC",
              text: "TBC",
              selected: selectedValues and selectedValues.status === "TBC"
            }
          ],
          value: selectedValues.status if selectedValues else ""
        }) }}

        <!-- Green status commentary -->
        <div id="green-commentary" class="govuk-form-group" style="display: none;">
          {{ govukTextarea({
            name: "green-text",
            id: "commentary-green",
            label: {
              text: "What's in place or being worked on?",
              classes: "govuk-label--m"
            },
            hint: {
              text: "What's in place or being worked on that demonstrates compliance"
            },
            value: (selectedValues.commentary if (selectedValues and selectedValues.status === "GREEN") else ""),
            rows: 5
          }) }}
        </div>

        <!-- Non-green status commentary (two fields) -->
        <div id="non-green-commentary" class="govuk-form-group" style="display: none;">
          {% set issueValue = "" %}
          {% set pathValue = "" %}
          {% if selectedValues and selectedValues.commentary and selectedValues.status !== "GREEN" %}
            {% set commentaryParts = selectedValues.commentary.split('\n\nPath to green: ') %}
            {% if commentaryParts.length > 1 %}
              {% set issueValue = commentaryParts[0] %}
              {% set pathValue = commentaryParts[1] %}
            {% else %}
              {% set issueValue = selectedValues.commentary %}
            {% endif %}
          {% endif %}
          
          {{ govukTextarea({
            name: "issue-text",
            id: "issue-description",
            label: {
              text: "Describe the issue",
              classes: "govuk-label--m"
            },
            hint: {
              text: "Describe the issue. Example: 'Team lacks content designer.'"
            },
            value: issueValue,
            rows: 3
          }) }}

          {{ govukTextarea({
            name: "path-text",
            id: "path-to-green",
            label: {
              text: "Path to green",
              classes: "govuk-label--m"
            },
            hint: {
              text: "Path to green. Example: 'borrow content designer from Defra DDTS'"
            },
            value: pathValue,
            rows: 3
          }) }}
        </div>

        <!-- Hidden field for the actual commentary that gets sent to backend -->
        <input type="hidden" name="commentary" id="final-commentary" value="{{ selectedValues.commentary if selectedValues else '' }}">

        <div class="govuk-button-group">
          {{ govukButton({
            text: "Save update"
          }) }}

          {{ govukButton({
            text: "Cancel",
            href: "/projects/" + projectId,
            classes: "govuk-button--secondary"
          }) }}
        </div>
      </form>
    </div>
  </div>

  <script>
    // Pass data from server to client
    const allStandards = {{ allStandards | safe }};
    const projectPhase = "{{ projectPhase }}";
    const professionStandardMatrix = {{ professionStandardMatrix | safe }};

    // Get DOM elements
    const professionSelect = document.getElementById('professionId');
    const standardSelect = document.getElementById('standardId');
    const statusSelect = document.getElementById('status');
    const greenCommentary = document.getElementById('green-commentary');
    const nonGreenCommentary = document.getElementById('non-green-commentary');
    const form = document.querySelector('form');

    // Function to update standards dropdown based on selected profession
    function updateStandardsDropdown() {
      const selectedProfession = professionSelect.value;
      
      // Clear current options
      standardSelect.innerHTML = '<option value="">Choose a service standard</option>';
      
      if (!selectedProfession || !projectPhase) {
        return;
      }

      // Get available standards for this profession and phase
      const availableStandardNumbers = professionStandardMatrix[projectPhase]?.[selectedProfession] || [];
      
      // Filter and add standards
      const filteredStandards = allStandards.filter(standard => {
        const standardNumber = standard.number || parseInt(standard.name?.match(/^\d+/)?.[0]);
        return availableStandardNumbers.includes(standardNumber);
      });

      // Add filtered standards to dropdown
      filteredStandards.forEach(standard => {
        const option = document.createElement('option');
        option.value = standard.id;
        option.textContent = `${standard.number}. ${standard.name}`;
        standardSelect.appendChild(option);
      });

      // If no standards available, show message
      if (filteredStandards.length === 0) {
        const option = document.createElement('option');
        option.value = '';
        option.textContent = 'No standards available for this profession in this phase';
        option.disabled = true;
        standardSelect.appendChild(option);
      }
    }

    // Function to show/hide commentary fields based on status
    function updateCommentaryFields() {
      const selectedStatus = statusSelect.value;
      
      if (selectedStatus === 'GREEN') {
        greenCommentary.style.display = 'block';
        nonGreenCommentary.style.display = 'none';
      } else if (selectedStatus && selectedStatus !== '') {
        greenCommentary.style.display = 'none';
        nonGreenCommentary.style.display = 'block';
      } else {
        greenCommentary.style.display = 'none';
        nonGreenCommentary.style.display = 'none';
      }
    }

    // Function to combine commentary fields before submission
    function combineCommentaryFields() {
      const selectedStatus = statusSelect.value;
      const finalCommentaryField = document.getElementById('final-commentary');
      
      if (selectedStatus === 'GREEN') {
        // For green status, use the single commentary field
        const greenText = document.getElementById('commentary-green').value;
        finalCommentaryField.value = greenText;
      } else if (selectedStatus && selectedStatus !== '') {
        // For non-green status, combine the two fields
        const issueText = document.getElementById('issue-description').value;
        const pathText = document.getElementById('path-to-green').value;
        
        let combinedText = '';
        if (issueText.trim()) {
          combinedText += issueText.trim();
        }
        if (pathText.trim()) {
          if (combinedText) combinedText += '\n\nPath to green: ';
          else combinedText += 'Path to green: ';
          combinedText += pathText.trim();
        }
        
        finalCommentaryField.value = combinedText;
      }
    }

    // Function to update commentary field in real-time as user types
    function updateCommentaryField() {
      combineCommentaryFields();
    }

    // Add event listeners
    professionSelect.addEventListener('change', updateStandardsDropdown);
    statusSelect.addEventListener('change', updateCommentaryFields);
    form.addEventListener('submit', combineCommentaryFields);

    // Add real-time update listeners for commentary fields
    document.getElementById('commentary-green').addEventListener('input', updateCommentaryField);
    document.getElementById('issue-description').addEventListener('input', updateCommentaryField);
    document.getElementById('path-to-green').addEventListener('input', updateCommentaryField);

    // Initialize on page load
    if (professionSelect.value) {
      updateStandardsDropdown();
    }
    if (statusSelect.value) {
      updateCommentaryFields();
    }
  </script>
{% endblock %}
