{% extends "layouts/page.njk" %}

{% from "govuk/components/textarea/macro.njk" import govukTextarea %}
{% from "govuk/components/select/macro.njk" import govukSelect %}
{% from "govuk/components/input/macro.njk" import govukInput %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/error-summary/macro.njk" import govukErrorSummary %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}
{% from "govuk/components/date-input/macro.njk" import govukDateInput %}

{% block content %}
  <h1 class="govuk-heading-xl">{{ project.name }}</h1>
  {% if errorMessage %}
    {{ govukErrorSummary({
      titleText: "There is a problem",
      errorList: [
        {
          text: errorMessage
        }
      ]
    }) }}
  {% endif %}

  {% set deliveryHtml %}
    <h2 class="govuk-heading-m">Update Project Delivery Status</h2>
    
    <form method="POST" action="/projects/{{ project.id }}/edit?type=delivery" novalidate>
      {{ govukSelect({
        id: "status",
        name: "status",
        label: {
          text: "Overall Project Status",
          classes: "govuk-label--s"
        },
        items: statusOptions,
        value: project.status
      }) }}

      {{ govukTextarea({
        name: "commentary",
        id: "commentary",
        label: {
          text: "Overall Project Commentary",
          classes: "govuk-label--m"
        },
        value: project.commentary
      }) }}

      {{ govukDateInput({
        id: "update-date",
        namePrefix: "updateDate",
        fieldset: {
          legend: {
            text: "Date of this update",
            classes: "govuk-fieldset__legend--s"
          }
        },
        hint: {
          text: "For example, 27 3 2024. Cannot be in the future. Defaults to today."
        },
        value: { day: '', month: '', year: '' }
      }) }}

      <div class="govuk-button-group">
        {{ govukButton({
          text: "Save Delivery Status"
        }) }}

        {{ govukButton({
          text: "Cancel",
          href: "/projects/" + project.id,
          classes: "govuk-button--secondary"
        }) }}
      </div>
    </form>

    <hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

    <h2 class="govuk-heading-m">Recent Delivery Status Updates</h2>
    {% if deliveryHistory and deliveryHistory.length > 0 %}
      <div class="timeline">
        {% for change in deliveryHistory %}
          <div class="timeline__event">
            <h3 class="timeline__event-title govuk-heading-s">
              {{ change.timestamp | formatDate }}
            </h3>
            <div class="govuk-body">
              {% if change.changes.status and change.changes.status.to %}
                <p class="govuk-!-font-weight-bold govuk-!-margin-bottom-1">
                  Delivery status update:
                  <span class="govuk-tag 
                    {% if change.changes.status.to === "RED" %}govuk-tag--red
                    {% elif change.changes.status.to === "AMBER" %}govuk-tag--yellow
                    {% elif change.changes.status.to === "GREEN" %}govuk-tag--green
                    {% endif %}">
                    {{ change.changes.status.to }}
                  </span>
                </p>
              {% endif %}
              
              {% if change.changes.commentary %}
                <p>{{ change.changes.commentary.to }}</p>
              {% endif %}
              <p class="govuk-body-s">
                <a href="/projects/{{ project.id }}/history/{{ change.id }}/archive" class="govuk-link govuk-link--no-visited-state">Archive this update</a>
              </p>
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <p class="govuk-body">No delivery status updates found.</p>
    {% endif %}
  {% endset %}

  {% set professionsHtml %}
    <h2 class="govuk-heading-m">Add New Profession Update</h2>
    
    <form method="POST" action="/projects/{{ project.id }}/edit?type=profession" novalidate>
      <div class="govuk-form-group">
        {{ govukSelect({
          id: "profession",
          name: "profession",
          label: {
            text: "Profession",
            classes: "govuk-label--s"
          },
          items: professionOptions
        }) }}
        
        {{ govukSelect({
          id: "profession-status",
          name: "profession-status",
          label: {
            text: "Status",
            classes: "govuk-label--s"
          },
          items: statusOptions
        }) }}

        {{ govukTextarea({
          name: "profession-commentary",
          id: "profession-commentary",
          label: {
            text: "Commentary",
            classes: "govuk-label--s"
          },
          value: ""
        }) }}

        {{ govukDateInput({
          id: "profession-update-date",
          namePrefix: "profession-updateDate",
          fieldset: {
            legend: {
              text: "Date of this profession update",
              classes: "govuk-fieldset__legend--s"
            }
          },
          hint: {
            text: "For example, 27 3 2024. Cannot be in the future. Defaults to today."
          },
          value: { day: '', month: '', year: '' }
        }) }}
      </div>

      <div class="govuk-button-group">
        {{ govukButton({
          text: "Add Profession Update"
        }) }}
        
        {{ govukButton({
          text: "Cancel",
          href: "/projects/" + project.id,
          classes: "govuk-button--secondary"
        }) }}
      </div>
    </form>

    <hr class="govuk-section-break govuk-section-break--l govuk-section-break--visible">

    <h2 class="govuk-heading-m">Recent Profession Updates</h2>
    {% if professionHistory and professionHistory.length > 0 %}
      <div class="timeline">
        {% for change in professionHistory %}
          <div class="timeline__event">
            <h3 class="timeline__event-title govuk-heading-s">
              {{ change.timestamp | formatDate }}
            </h3>
            <div class="govuk-body">
              <p class="govuk-!-font-weight-bold govuk-!-margin-bottom-1">
                {{ change.professionName }} update:
                {% if change.changes.status.to %}
                  <span class="govuk-tag 
                    {% if change.changes.status.to === "RED" %}govuk-tag--red
                    {% elif change.changes.status.to === "AMBER" %}govuk-tag--yellow
                    {% elif change.changes.status.to === "GREEN" %}govuk-tag--green
                    {% endif %}">
                    {{ change.changes.status.to }}
                  </span>
                {% endif %}
              </p>
              
              {% if change.changes.commentary %}
                <p>{{ change.changes.commentary.to }}</p>
              {% endif %}
              <p class="govuk-body-s">
                <a href="/projects/{{ project.id }}/professions/{{ change.professionId }}/history/{{ change.id }}/archive" class="govuk-link govuk-link--no-visited-state">Archive this update</a>
              </p>
            </div>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <p class="govuk-body">No profession updates found.</p>
    {% endif %}
  {% endset %}

  {{ govukTabs({
    items: [
      {
        id: "delivery",
        label: "Delivery status",
        panel: {
          html: deliveryHtml
        }
      },
      {
        id: "professions",
        label: "Profession updates",
        panel: {
          html: professionsHtml
        }
      }
    ]
  }) }}
{% endblock %}

{% block pageStyles %}
<style>
  .timeline {
    position: relative;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .timeline__event {
    position: relative;
    padding: 1em 0 1em 2em;
    border-left: 2px solid #b1b4b6;
  }

  .timeline__event:last-child {
    border-left: none;
  }

  .timeline__event:before {
    content: "";
    position: absolute;
    left: -7px;
    top: 1.5em;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #0b0c0c;
  }

  .timeline__event-title {
    margin: 0 0 0.5em;
  }
</style>
{% endblock %}

{% block bodyEnd %}
  {{ super() }}
  <script nonce="{{ nonce }}">
    // Wrap everything in an IIFE to avoid global scope pollution
    (function() {
      // Store event handlers in variables for cleanup
      let professionChangeHandler = null;
      let domContentLoadedHandler = null;

      // Simple tab selection function
      function selectTabWithId(tabId) {
        try {
          const tabElements = document.querySelectorAll('[role="tab"]');
          if (!tabElements || tabElements.length === 0) {
            console.warn('No tab elements found');
            return;
          }
          
          // Find the tab with the matching id or containing the id
          let targetTab = null;
          for (let i = 0; i < tabElements.length; i++) {
            if (tabElements[i].id === tabId || tabElements[i].id.includes(tabId)) {
              targetTab = tabElements[i];
              break;
            }
          }
          
          // Click the tab if found
          if (targetTab) {
            targetTab.click();
          } else {
            console.warn('Tab with id containing "' + tabId + '" not found');
          }
        } catch (err) {
          console.error('Error selecting tab:', err);
        }
      }
      
      // Set up event handlers when DOM is loaded
      domContentLoadedHandler = function() {
        try {
          // Set up profession form behavior
          const professionSelect = document.getElementById('profession');
          const statusSelect = document.getElementById('profession-status');
          const commentaryInput = document.getElementById('profession-commentary');
          
          if (professionSelect) {
            professionChangeHandler = function() {
              const professionId = professionSelect.value;
              if (!professionId) {
                // Reset fields if "Select a profession" is chosen
                if (statusSelect) statusSelect.value = '';
                if (commentaryInput) commentaryInput.value = '';
                return;
              }
              
              // Set default value for new profession
              if (statusSelect) statusSelect.value = 'AMBER'; // Set a default value
              if (commentaryInput) commentaryInput.value = '';
            };
            
            professionSelect.addEventListener('change', professionChangeHandler);
          }

          // Handle tab selection from query parameter
          const urlParams = new URLSearchParams(window.location.search);
          const tabParam = urlParams.get('tab');
          if (tabParam === 'professions') {
            selectTabWithId('professions');
          } else if (tabParam === 'delivery') {
            selectTabWithId('delivery');
          }
        } catch (e) {
          console.error('Error in DOM setup:', e);
        }
      };

      // Add the DOMContentLoaded listener
      document.addEventListener('DOMContentLoaded', domContentLoadedHandler);

      // Cleanup function to remove event listeners
      function cleanup() {
        const professionSelect = document.getElementById('profession');
        if (professionSelect && professionChangeHandler) {
          professionSelect.removeEventListener('change', professionChangeHandler);
        }
        if (domContentLoadedHandler) {
          document.removeEventListener('DOMContentLoaded', domContentLoadedHandler);
        }
      }

      // Clean up event listeners when the page is unloaded
      window.addEventListener('unload', cleanup);
    })();
  </script>
{% endblock %} 