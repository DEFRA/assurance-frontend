{% extends 'layouts/page.njk' %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "govuk/components/tag/macro.njk" import govukTag %}
{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "govuk/components/details/macro.njk" import govukDetails %}
{% from "govuk/components/tabs/macro.njk" import govukTabs %}
{% from "status-tag.njk" import renderStatusTag %}

{% block content %}
  {{ appHeading({
    text: heading
  }) }}

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-full">
      {% if projects.length > 0 %}
        <!-- Insights Tabs -->
        {% set analyticsContent %}
          <div class="govuk-table-container">
            <table class="govuk-table">
              <caption class="govuk-table__caption govuk-table__caption--m">
                Project insights and analytics
              </caption>
              <thead class="govuk-table__head">
                <tr class="govuk-table__row">
                  <th scope="col" class="govuk-table__header sortable" data-sort="text">Project name</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="number">Standards completed</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="number">R</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="number">A</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="number">G</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="number">All standards score</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="number">Completed standards score</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="rag">Manual RAG</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="rag">Lowest RAG</th>
                  <th scope="col" class="govuk-table__header sortable" data-sort="date">Last updated</th>
                </tr>
              </thead>
              <tbody class="govuk-table__body">
                {% for project in projects %}
                  {% set redCount = 0 %}
                  {% set amberCount = 0 %}
                  {% set greenCount = 0 %}
                  {% if project.standardsSummary %}
                    {% for standard in project.standardsSummary %}
                      {% if standard.aggregatedStatus == 'RED' %}
                        {% set redCount = redCount + 1 %}
                      {% elif standard.aggregatedStatus == 'AMBER' %}
                        {% set amberCount = amberCount + 1 %}
                      {% elif standard.aggregatedStatus == 'GREEN' %}
                        {% set greenCount = greenCount + 1 %}
                      {% endif %}
                    {% endfor %}
                  {% endif %}
                  
                  <tr class="govuk-table__row">
                    <td class="govuk-table__cell">
                      <a href="/projects/{{ project.id }}" class="govuk-link">{{ project.name }}</a>
                    </td>
                    <td class="govuk-table__cell">
                      {% if project.projectStatus %}
                        {{ project.projectStatus.numberOfStandardsCompleted }}/14
                      {% else %}
                        <span class="govuk-hint">No data available</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell govuk-table__cell--numeric">
                      {% if redCount > 0 %}
                        {{ govukTag({ text: redCount, classes: "govuk-tag--red" }) }}
                      {% else %}
                        <span class="govuk-body-s">0</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell govuk-table__cell--numeric">
                      {% if amberCount > 0 %}
                        {{ govukTag({ text: amberCount, classes: "govuk-tag--yellow" }) }}
                      {% else %}
                        <span class="govuk-body-s">0</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell govuk-table__cell--numeric">
                      {% if greenCount > 0 %}
                        {{ govukTag({ text: greenCount, classes: "govuk-tag--green" }) }}
                      {% else %}
                        <span class="govuk-body-s">0</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell">
                      {% if project.projectStatus %}
                        <div class="progress-bar">
                          <div class="progress-bar__fill" style="width: {{ project.projectStatus.percentageAcrossAllStandards }}%"></div>
                        </div>
                        <span class="govuk-body-s">{{ project.projectStatus.percentageAcrossAllStandards }}%</span>
                      {% else %}
                        <span class="govuk-hint">No data</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell">
                      {% if project.projectStatus %}
                        <div class="progress-bar">
                          <div class="progress-bar__fill progress-bar__fill--quality" style="width: {{ project.projectStatus.percentageAcrossCompletedStandards }}%"></div>
                        </div>
                        <span class="govuk-body-s">{{ project.projectStatus.percentageAcrossCompletedStandards }}%</span>
                      {% else %}
                        <span class="govuk-hint">No data</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell">
                      {{ renderStatusTag(project.status) }}
                    </td>
                    <td class="govuk-table__cell">
                      {% if project.projectStatus and project.projectStatus.lowestRag %}
                        {{ renderStatusTag(project.projectStatus.lowestRag) }}
                      {% else %}
                        <span class="govuk-hint">No data</span>
                      {% endif %}
                    </td>
                    <td class="govuk-table__cell">
                      {% if project.lastUpdated %}
                        <span class="govuk-body-s">{{ project.lastUpdated | formatDate }}</span>
                      {% else %}
                        <span class="govuk-hint">No date</span>
                      {% endif %}
                    </td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        {% endset %}

        {% set projectChangesContent %}
          {% if projectChangesByProject %}
            {% for projectId, projectData in projectChangesByProject %}
              <div class="govuk-!-margin-bottom-6">
                {% call govukDetails({
                  summaryText: projectData.projectName + " (" + (projectData.changes | length) + " changes)"
                }) %}
                  <div class="timeline">
                    {% for change in projectData.changes %}
                      <div class="timeline__event">
                        <h3 class="timeline__event-title govuk-heading-s">
                          {{ change.timestamp | formatDate('d MMM yy') }}
                        </h3>
                        
                        <div class="timeline__event-content">
                          {% if change.changes.status %}
                            <p class="govuk-body govuk-!-margin-bottom-2">
                              <strong>Delivery status updated:</strong> {{ renderStatusTag(change.changes.status.to) }}
                            </p>
                          {% endif %}
                          
                          {% if change.changes.name %}
                            <p class="govuk-body govuk-!-margin-bottom-2">
                              <strong>Project name updated:</strong> {{ change.changes.name.to }}
                            </p>
                          {% endif %}
                          
                          {% if change.changes.phase %}
                            <p class="govuk-body govuk-!-margin-bottom-2">
                              <strong>Phase updated:</strong> {{ change.changes.phase.to }}
                            </p>
                          {% endif %}
                          
                          {% if change.changes.commentary and change.changes.commentary.to %}
                            {% set displayCommentary = change.changes.commentary.to %}
                            {% if "Path to green:" in displayCommentary %}
                              {% set parts = displayCommentary.split("Path to green:") %}
                              {% set issue = parts[0] | trim if parts[0] else "" %}
                              {% set path = parts[1] | trim if parts[1] else "" %}
                              
                              {% if issue and path %}
                                {% set displayCommentary = (issue + "\r\n\r\n" + path) | trim %}
                              {% elif issue %}
                                {% set displayCommentary = issue | trim %}
                              {% elif path %}
                                {% set displayCommentary = path | trim %}
                              {% endif %}
                            {% else %}
                              {% set displayCommentary = displayCommentary | trim %}
                            {% endif %}
                            <div style="white-space: pre-wrap;" class="govuk-!-margin-bottom-2">{{ displayCommentary }}</div>
                          {% endif %}
                          
                          {% if change.changes.tags %}
                            <p class="govuk-body govuk-!-margin-bottom-2">
                              <strong>Tags updated</strong>
                            </p>
                          {% endif %}
                        </div>
                      </div>
                    {% endfor %}
                  </div>
                  <p class="govuk-!-margin-top-4">
                    <a href="/projects/{{ projectId }}#engagement" class="govuk-link">View full project timeline</a>
                  </p>
                {% endcall %}
              </div>
            {% endfor %}
          {% elif projects and projects.length > 0 %}
            <p class="govuk-body">No recent project changes found. This could mean:</p>
            <ul class="govuk-list govuk-list--bullet">
              <li>No changes have been made to projects recently</li>
              <li>The project history API is not returning data</li>
              <li>Projects exist but have no recorded history</li>
            </ul>
            <p class="govuk-body">Available projects: {{ projects.length }}</p>
          {% else %}
            <p class="govuk-body">No projects available to check for changes.</p>
          {% endif %}
        {% endset %}

        {% set serviceChangesContent %}
          {% if serviceStandardChangesByProject %}
            {% for projectId, projectData in serviceStandardChangesByProject %}
              <div class="govuk-!-margin-bottom-6">
                <h3 class="govuk-heading-s">
                  <a href="/projects/{{ projectId }}" class="govuk-link">{{ projectData.projectName }}</a>
                </h3>
                
                {% for standardKey, standardData in projectData.standardChanges %}
                  {% call govukDetails({
                    summaryText: (standardData.standardId | replace("standard-", "")) + " - " + (standardData.professionId | replace("-", " ") | title)
                  }) %}
                    <div class="timeline">
                      {% for change in standardData.changes %}
                        <div class="timeline__event">
                          <h3 class="timeline__event-title govuk-heading-s">
                            {{ change.timestamp | formatDate('d MMM yy') }}
                          </h3>
                          
                          <div class="timeline__event-content">
                            {% if change.changes.status %}
                              <p class="govuk-body govuk-!-margin-bottom-2">
                                <strong>Assessment status updated:</strong> {{ renderStatusTag(change.changes.status.to) }}
                              </p>
                            {% endif %}
                            
                            {% if change.changes.commentary and change.changes.commentary.to %}
                              {% set displayCommentary = change.changes.commentary.to %}
                              {% if "Path to green:" in displayCommentary %}
                                {% set parts = displayCommentary.split("Path to green:") %}
                                {% set issue = parts[0] | trim if parts[0] else "" %}
                                {% set path = parts[1] | trim if parts[1] else "" %}
                                
                                {% if issue and path %}
                                  {% set displayCommentary = (issue + "\r\n\r\n" + path) | trim %}
                                {% elif issue %}
                                  {% set displayCommentary = issue | trim %}
                                {% elif path %}
                                  {% set displayCommentary = path | trim %}
                                {% endif %}
                              {% else %}
                                {% set displayCommentary = displayCommentary | trim %}
                              {% endif %}
                              
                              {% if displayCommentary %}
                                <div style="white-space: pre-wrap;" class="govuk-!-margin-bottom-2">{{ displayCommentary }}</div>
                              {% endif %}
                            {% endif %}
                          </div>
                        </div>
                      {% endfor %}
                    </div>
                    <p class="govuk-!-margin-top-4">
                      <a href="/projects/{{ projectId }}/standards/{{ standardData.standardId }}/professions/{{ standardData.professionId }}/history" class="govuk-link">View full assessment history</a>
                    </p>
                  {% endcall %}
                {% endfor %}
              </div>
            {% endfor %}
          {% elif projects and projects.length > 0 %}
            <p class="govuk-body">No recent service standard changes found. This could mean:</p>
            <ul class="govuk-list govuk-list--bullet">
              <li>No assessment changes have been made recently</li>
              <li>The assessment history API is not returning data</li>
              <li>Projects exist but have no recorded assessment history</li>
            </ul>
            <p class="govuk-body">Available projects: {{ projects.length }}</p>
          {% else %}
            <p class="govuk-body">No projects available to check for service standard changes.</p>
          {% endif %}
        {% endset %}

        {{ govukTabs({
          items: [
            {
              label: "Project analytics",
              id: "analytics",
              panel: {
                html: analyticsContent
              }
            },
            {
              label: "Project changes",
              id: "project-changes", 
              panel: {
                html: projectChangesContent
              }
            },
            {
              label: "Service standard changes",
              id: "service-changes",
              panel: {
                html: serviceChangesContent
              }
            }
          ]
        }) }}

      {% else %}
        <p class="govuk-body">No projects available.</p>
      {% endif %}
    </div>
  </div>
{% endblock %}

{% block pageStyles %}
<style>
  .govuk-table-container {
    overflow-x: auto;
  }
  
  .progress-bar {
    width: 60px;
    height: 12px;
    background-color: #f3f2f1;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 4px;
  }
  
  .progress-bar__fill {
    height: 100%;
    background-color: #00703c;
    transition: width 0.3s ease;
  }
  
  .progress-bar__fill--quality {
    background-color: #1d70b8;
  }
  
  /* Timeline styles */
  .timeline {
    border-left: 3px solid #b1b4b6;
    margin-left: 20px;
    padding-left: 30px;
  }
  
  .timeline__event {
    position: relative;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #f3f2f1;
  }
  
  .timeline__event:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }
  
  .timeline__event::before {
    content: '';
    position: absolute;
    left: -39px;
    top: 8px;
    width: 12px;
    height: 12px;
    background-color: #1d70b8;
    border-radius: 50%;
    border: 3px solid #ffffff;
  }
  
  .timeline__event-title {
    margin: 0 0 10px 0;
    font-size: 19px;
    font-weight: 700;
  }
  
  .timeline__event-content {
    margin-top: 10px;
  }
  
  /* Ensure status tags render inline properly */
  .timeline__event-content .govuk-tag {
    display: inline-block;
    vertical-align: baseline;
    margin: 0 2px;
  }
  
  /* Sortable table styles */
  .sortable {
    cursor: pointer;
    position: relative;
    user-select: none;
  }
  
  .sortable:hover {
    background-color: #f3f2f1;
  }
  
  .sortable::after {
    content: '↕';
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.5;
    font-size: 12px;
  }
  
  .sortable.sort-asc::after {
    content: '↑';
    opacity: 1;
  }
  
  .sortable.sort-desc::after {
    content: '↓';
    opacity: 1;
  }
  
  .sortable:focus {
    outline: 3px solid #ffdd00;
    outline-offset: 0;
    box-shadow: inset 0 0 0 2px #0b0c0c;
  }
  
  /* Consistent tag sizing for both single and stacked RAG tags */
  .govuk-table .govuk-tag {
    font-size: 12px;
    padding: 3px 7px;
    margin: 0;
  }
  
  /* Fix for multiple RAG tags */
  .app-tag-list {
    display: flex;
    flex-direction: column;
    gap: 2px;
    align-items: flex-start;
  }
  
  .app-tag-list .govuk-tag {
    min-width: 50px;
    text-align: center;
    box-sizing: border-box;
  }
  
  @media (max-width: 768px) {
    .govuk-table__header,
    .govuk-table__cell {
      padding: 8px 4px;
      font-size: 14px;
    }
    
    .progress-bar {
      width: 40px;
      height: 8px;
    }
    
    .sortable::after {
      right: 4px;
      font-size: 10px;
    }
    
    .timeline {
      margin-left: 15px;
      padding-left: 20px;
    }
    
    .timeline__event::before {
      left: -29px;
      width: 10px;
      height: 10px;
    }
    
    .timeline__event-title {
      font-size: 16px;
    }
  }
</style>
{% endblock %}

{% block pageScripts %}
<script>
  (function() {
    // Store event handlers in variables for cleanup
    let domContentLoadedHandler = null;
    let sortHandlers = [];

    // Table sorting functionality
    function initTableSort() {
      const table = document.querySelector('.govuk-table');
      if (!table) return;

      const headers = table.querySelectorAll('.sortable');
      
      headers.forEach((header, index) => {
        // Make headers keyboard accessible
        header.setAttribute('tabindex', '0');
        header.setAttribute('role', 'button');
        header.setAttribute('aria-label', `Sort by ${header.textContent.trim()}`);
        
        const clickHandler = (e) => sortTable(index, header);
        const keyHandler = (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            sortTable(index, header);
          }
        };
        
        header.addEventListener('click', clickHandler);
        header.addEventListener('keydown', keyHandler);
        
        // Store handlers for cleanup
        sortHandlers.push({ element: header, click: clickHandler, key: keyHandler });
      });
    }

    function sortTable(columnIndex, header) {
      const table = document.querySelector('.govuk-table');
      const tbody = table.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      const sortType = header.getAttribute('data-sort');
      
      // Determine sort direction
      const currentSort = header.classList.contains('sort-asc') ? 'asc' : 
                         header.classList.contains('sort-desc') ? 'desc' : '';
      
      // For RAG columns, default to ascending (worst statuses first: RED=1, PENDING=6)
      // For other columns, default to ascending as normal
      let newSort;
      if (currentSort === '') {
        // First click - for RAG columns, show worst first (ascending: 1,2,3,5,6)
        newSort = 'asc';
      } else {
        // Subsequent clicks - toggle direction
        newSort = currentSort === 'asc' ? 'desc' : 'asc';
      }
      
      // Clear all sort classes
      document.querySelectorAll('.sortable').forEach(h => {
        h.classList.remove('sort-asc', 'sort-desc');
        h.setAttribute('aria-label', `Sort by ${h.textContent.trim()}`);
      });
      
      // Set new sort class and aria-label
      header.classList.add(`sort-${newSort}`);
      header.setAttribute('aria-label', `Sort by ${header.textContent.trim()} (${newSort}ending)`);
      
      // Sort rows
      rows.sort((a, b) => {
        const aVal = getCellValue(a, columnIndex, sortType);
        const bVal = getCellValue(b, columnIndex, sortType);
        
        let result = 0;
        if (sortType === 'number' || sortType === 'rag') {
          // For numbers and RAG values (which return numeric sort orders)
          result = parseFloat(aVal || 0) - parseFloat(bVal || 0);
        } else if (sortType === 'date') {
          const aDate = new Date(aVal || 0);
          const bDate = new Date(bVal || 0);
          result = aDate.getTime() - bDate.getTime();
        } else {
          result = (aVal || '').localeCompare(bVal || '');
        }
        
        return newSort === 'desc' ? -result : result;
      });
      
      // Reorder rows in DOM
      rows.forEach(row => tbody.appendChild(row));
    }

    function getCellValue(row, columnIndex, sortType) {
      const cell = row.children[columnIndex];
      if (!cell) return '';
      
      // Handle different cell contents
      if (sortType === 'number') {
        // For progress bars and percentages
        const percentMatch = cell.textContent.match(/(\d+(?:\.\d+)?)%/);
        if (percentMatch) return percentMatch[1];
        
        // For fractions like "8/14"
        const fractionMatch = cell.textContent.match(/(\d+)\/\d+/);
        if (fractionMatch) return fractionMatch[1];
        
        // For plain numbers (tag content)
        const numberMatch = cell.textContent.match(/\d+/);
        if (numberMatch) return numberMatch[0];
        
        return '0';
      } else if (sortType === 'date') {
        // Extract date from cell, handle "No date" case
        const dateText = cell.textContent.trim();
        return dateText === 'No date' ? '' : dateText;
      } else if (sortType === 'rag') {
        // Special handling for RAG status sorting
        const cellText = cell.textContent.trim().toUpperCase();
        
        // Map RAG values to sort order (lower numbers = higher priority when sorting)
        // Scale: Red, Amber Red, Amber, Green Amber, Green, Pending
        // Use array to ensure we check most specific patterns first
        // Scale: Pending (needs assessment), Red, Amber Red, Amber, Green Amber, Green
        const ragMapping = [
          { pattern: 'AMBERRED', order: 3 },      // Compound tag renders as concatenated text
          { pattern: 'AMBER_RED', order: 3 },     // Third priority
          { pattern: 'AMBER RED', order: 3 },     // Handle both formats
          { pattern: 'GREENAMBER', order: 5 },    // Compound tag renders as concatenated text  
          { pattern: 'GREEN_AMBER', order: 5 },   // Check this before "GREEN" and "AMBER"
          { pattern: 'GREEN/AMBER', order: 5 },   // Handle both formats
          { pattern: 'GREEN AMBER', order: 5 },
          { pattern: 'PENDING', order: 1 },       // Highest priority - needs assessment
          { pattern: 'RED', order: 2 },           // Second priority - assessed but failing
          { pattern: 'AMBER', order: 4 },         // Check after compound patterns
          { pattern: 'GREEN', order: 6 }          // Lowest priority - assessed and good
        ];
        
        // Find the first matching pattern (most specific wins)
        for (const mapping of ragMapping) {
          if (cellText.includes(mapping.pattern)) {
            return mapping.order;
          }
        }
        
        // Default for unrecognized patterns
        return 999;
      } else {
        // For other text, get the visible text
        return cell.textContent.trim();
      }
    }

    // Initialize table sorting
    domContentLoadedHandler = function() {
      initTableSort();
    };

    // Event listener setup
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', domContentLoadedHandler);
    } else {
      domContentLoadedHandler();
    }

    // Cleanup function
    window.addEventListener('beforeunload', function() {
      // Clean up sort handlers
      sortHandlers.forEach(handler => {
        handler.element.removeEventListener('click', handler.click);
        handler.element.removeEventListener('keydown', handler.key);
      });
      
      if (domContentLoadedHandler) {
        document.removeEventListener('DOMContentLoaded', domContentLoadedHandler);
      }
    });
  })();
</script>
{% endblock %} 