{% extends 'layouts/page.njk' %}

{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/notification-banner/macro.njk" import govukNotificationBanner %}

{% block pageTitle %}{{ pageTitle }}{% endblock %}

{% block pageStyles %}
<style>
  /* GOV.UK Search Component Styles */
  .gem-c-search {
    position: relative;
    max-width: 100%;
  }

  .gem-c-search__item-wrapper {
    display: flex;
    position: relative;
  }

  .gem-c-search__item {
    position: relative;
  }

  .js-search-input-wrapper {
    flex: 1;
  }

  .gem-c-search__input {
    border-top-right-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
    border-right: none !important;
    height: 50px !important;
    box-sizing: border-box !important;
  }

  .gem-c-search__submit-wrapper {
    flex: 0 0 auto;
  }

  .gem-c-search__submit {
    background-color: #1d70b8;
    border: 3px solid #1d70b8;
    border-left: none;
    border-radius: 0 4px 4px 0;
    color: #ffffff;
    cursor: pointer;
    font-family: "GDS Transport", arial, sans-serif;
    font-size: 0;
    line-height: 1;
    padding: 0;
    position: relative;
    text-align: center;
    vertical-align: top;
    white-space: nowrap;
    height: 50px;
    width: 50px;
    box-sizing: border-box;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gem-c-search__submit:hover {
    background-color: #003078;
    border-color: #003078;
  }

  .gem-c-search__submit:focus {
    background-color: #fd0;
    border-color: #fd0;
    box-shadow: 0 -2px #fd0, 0 4px #0b0c0c;
    color: #0b0c0c;
    outline: 4px solid transparent;
  }

  .gem-c-search__submit:focus .gem-c-search__icon {
    color: #0b0c0c;
  }

  .gem-c-search__icon {
    color: currentColor;
    height: 20px;
    width: 20px;
    vertical-align: middle;
    margin-left: 5px;
  }

  /* Ensure the autocomplete input matches the search styling */
  .autocomplete__wrapper {
    position: relative !important;
  }

  .autocomplete__input {
    border-top-right-radius: 0 !important;
    border-bottom-right-radius: 0 !important;
    border-right: none !important;
    height: 50px !important;
    box-sizing: border-box !important;
  }

  .autocomplete__input:focus {
    border-right: none !important;
  }


  /* Delivery groups sidebar - same formatting as project details page */
  .delivery-groups-sidebar {
    margin-top: 100px; /* Align with search label */
  }
  
  .delivery-groups-sidebar dt {
    margin-bottom: 4px;
  }

  .delivery-groups-sidebar dd {
    margin: 0 0 12px 0;
  }
</style>
{% endblock %}

{% block content %}
  {% if notification %}
    {% set notificationHtml %}
      <p class="govuk-notification-banner__heading">{{ notification }}</p>
    {% endset %}
    {{ govukNotificationBanner({
      html: notificationHtml
    }) }}
  {% endif %}

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <h1 class="govuk-heading-xl">Defra Digital Assurance</h1>
      <form method="GET" action="/projects" class="govuk-!-margin-bottom-6">
        <div class="govuk-form-group">
          <label class="govuk-label govuk-label--s" for="search">
            Find a project by name
          </label>
          <div class="gem-c-search">
            <div class="gem-c-search__item-wrapper">
              <div class="js-search-input-wrapper">
                <div id="search-container" class="govuk-!-margin-bottom-0"></div>
              </div>
              <div class="gem-c-search__item gem-c-search__submit-wrapper">
                <button class="gem-c-search__submit" type="submit" enterkeyhint="search">
                  <svg class="gem-c-search__icon" width="27" height="27" viewBox="0 0 27 27" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false">
                    <circle cx="12.0161" cy="11.0161" r="8.51613" stroke="currentColor" stroke-width="3"></circle>
                    <line x1="17.8668" y1="17.3587" x2="26.4475" y2="25.9393" stroke="currentColor" stroke-width="3"></line>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>

      <p class="govuk-body">
        <a href="/projects" class="govuk-link">View all projects</a>
      </p>
      
      <h2 class="govuk-heading-m">Team Objectives</h2>
      <p class="govuk-body">
        The Cross Cutting Technical Services (CCTS) Assurance team provides assurance of Defra's digital delivery so that leaders, teams, and users can be confident in the health and quality of services.
      </p>
      <ul class="govuk-list govuk-list--bullet">
        <li><strong>give leaders confidence:</strong> offering impartial assessments of delivery health and whether projects are set up to succeed.</li>
        <li><strong>support delivery teams:</strong> providing constructive feedback and recommendations to strengthen capability and practice.</li>
        <li><strong>protect value for users:</strong> ensuring services are designed to meet user needs and are delivered in line with GDS and Defra standards.</li>
      </ul>
      <p class="govuk-body">
        Our assurance approach is independent, transparent, and proportionate to risk.
      </p>

      <h2 class="govuk-heading-m">How we assure</h2>
      <p class="govuk-body">
        We are a multidisciplinary team who work closely with delivery professionals across Defra. We review deliverables and ways of working, assessing them against the 14 points of the <a href="https://www.gov.uk/service-manual/service-standard" class="govuk-link" target="_blank" rel="noopener noreferrer">GDS Service Standard</a>. Each point can be given a RAG rating by a relevant profession, with clear observations and recommended actions recorded in this service. The service standards are assigned the lowest RAG rating from professions which contributed findings. Each delivery also receives an overall rating on a five-point RAG scale, supported by relevant commentary.
      </p>
      <p class="govuk-body">
        Over time, we aim to enrich this service by integrating additional data sources. Combining objective delivery data with profession-based evaluations will give leaders and teams a more rounded view of delivery health.
      </p>
      <p class="govuk-body">
        At present, our assurance activity focuses mainly on Defra's major projects. We are currently reviewing our engagement model so that we can scale our approach and maximise impact across the full delivery portfolio.
      </p>
    </div>

    <div class="govuk-grid-column-one-third">
      <div class="delivery-groups-sidebar">
        {% if deliveryGroups and deliveryGroups.length > 0 %}
          <div class="govuk-!-margin-bottom-4">
            <dt class="govuk-body govuk-!-font-weight-bold">Projects by Delivery Group</dt>
            <dd class="govuk-body">
              {% for group in deliveryGroups %}
                <a href="/delivery-groups/{{ group.id or group.Id }}" class="govuk-link">
                  {{ group.name or group.Name }}
                </a>
                {%- if not loop.last %}<br>{% endif -%}
              {% endfor %}
            </dd>
          </div>
        {% else %}
          <div class="govuk-!-margin-bottom-4">
            <dt class="govuk-body govuk-!-font-weight-bold">Projects by Delivery Group</dt>
            <dd class="govuk-body">No delivery groups available.</dd>
          </div>
        {% endif %}

        {% if deliveryPartners and deliveryPartners.length > 0 %}
          <div class="govuk-!-margin-bottom-4">
            <dt class="govuk-body govuk-!-font-weight-bold">Projects by Delivery Partner</dt>
            <dd class="govuk-body">
              {% for partner in deliveryPartners %}
                <a href="/delivery-partners/{{ partner.id or partner.Id }}" class="govuk-link">
                  {{ partner.name or partner.Name }}
                </a>
                {%- if not loop.last %}<br>{% endif -%}
              {% endfor %}
            </dd>
          </div>
        {% else %}
          <div class="govuk-!-margin-bottom-4">
            <dt class="govuk-body govuk-!-font-weight-bold">Projects by Delivery Partner</dt>
            <dd class="govuk-body">No delivery partners available.</dd>
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  <div class="govuk-grid-row govuk-!-margin-top-6">
    <div class="govuk-grid-column-two-thirds">
      <h3 class="govuk-heading-s">RAG Status Definitions</h3>
      <ul class="govuk-list">
        <li class="govuk-body govuk-!-margin-bottom-2">
          <strong>Red</strong> - Major concerns, delivery is at risk and needs immediate intervention.
        </li>
        <li class="govuk-body govuk-!-margin-bottom-2">
          <strong>Amber/Red</strong> - Concerns, possibly becoming major. The delivery is at risk and needs intervention before it escalates to red.
        </li>
        <li class="govuk-body govuk-!-margin-bottom-2">
          <strong>Amber</strong> - Concerns, needs monitoring and support.
        </li>
        <li class="govuk-body govuk-!-margin-bottom-2">
          <strong>Green/Amber</strong> - Minor issues that need monitoring.
        </li>
        <li class="govuk-body">
          <strong>Green</strong> - On track, no immediate issues.
        </li>
      </ul>
    </div>
  </div>
{% endblock %}

{% block pageScripts %}
<script>
  (function() {
    // Store event handlers in variables for cleanup
    let formSubmitHandler = null;
    let domContentLoadedHandler = null;

    // Initialize autocomplete and form handling
    domContentLoadedHandler = function() {
      // Create a list of project names for the autocomplete
      const projectNames = {{ projectNames | dump | safe }};
      
      // Initialize the GOV.UK accessible autocomplete
      accessibleAutocomplete({
        element: document.querySelector('#search-container'),
        id: 'search',
        name: 'search',
        defaultValue: '{{ searchTerm }}',
        source: projectNames,
        placeholder: 'Start typing to search',
        autoselect: false,
        confirmOnBlur: false,
        showNoOptionsFound: true,
        minLength: 2,
        displayMenu: 'overlay',
        onConfirm: function(selectedProjectName) {
          // Always submit the form when a value is confirmed (either by selection or Enter)
          const form = document.querySelector('form[method="GET"]');
          
          if (selectedProjectName && selectedProjectName.trim()) {
            // For home page, always redirect to projects with search term
            window.location.href = `/projects?search=${encodeURIComponent(selectedProjectName)}`;
            return;
          }
          
          // For all other cases, submit the form
          if (form) {
            // Use a small timeout to ensure the input value is properly set
            setTimeout(() => {
              form.submit();
            }, 50);
          }
        },
        tNoResults: function() { 
          return 'No projects found';
        },
        tStatusQueryTooShort: function(minQueryLength) {
          return `Type in ${minQueryLength} or more characters for results`;
        }
      });
      
      const form = document.querySelector('form[method="GET"]');
      
      // Handle form submission for search functionality
      if (form) {
        formSubmitHandler = function(event) {
          const searchInput = document.querySelector('#search');
          
          // If search input is empty, redirect to projects page
          if (searchInput && !searchInput.value.trim()) {
            event.preventDefault();
            window.location.href = '/projects';
            return;
          }
          
          // If search input has value, allow normal form submission
          // No need to prevent default - let the form submit normally with GET parameters
        };
        
        form.addEventListener('submit', formSubmitHandler);
      }
      
      // Add fallback Enter key handler after autocomplete is initialized
      setTimeout(() => {
        const searchInputElement = document.querySelector('#search');
        if (searchInputElement) {
          searchInputElement.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
              event.preventDefault(); // Prevent default to avoid double submission
              // Submit the form after a small delay
              setTimeout(() => {
                if (this.value && this.value.trim()) {
                  const form = document.querySelector('form[method="GET"]');
                  if (form) {
                    form.submit();
                  }
                }
              }, 50);
            }
          });
        }
      }, 200); // Wait for autocomplete to be fully initialized
    };

    // Event listener setup
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', domContentLoadedHandler);
    } else {
      domContentLoadedHandler();
    }

    // Cleanup function
    window.addEventListener('beforeunload', function() {
      if (formSubmitHandler) {
        const form = document.querySelector('form[method="GET"]');
        if (form) {
          form.removeEventListener('submit', formSubmitHandler);
        }
      }
      
      if (domContentLoadedHandler) {
        document.removeEventListener('DOMContentLoaded', domContentLoadedHandler);
      }
    });
  })();
</script>
{% endblock %}